geom_line(aes(x = frecuencias, y = log(vasija_180)), colour= 'yellow') +
labs(x = "Frecuencias",
y = 'Log(Intensidad)')
# Medias y Variancias
x_bar_X = matrix(colMeans(Vessel_X))
x_var_X =  matrix(diag(var(Vessel_X)))
se = sqrt(x_var_X)
dsa = data.frame(cbind(x_bar_X,x_var_X,se))
colnames(dsa) = c('means','var','se')
ggplot(dsa, aes(x=seq(100, dim(dsa)[1]+99), y=log(means))) +
geom_errorbar(aes(ymin=log(means-se), ymax= log(means+se)), width=.1,colour="red") +
labs(x="Frecuencias") +
geom_line() +
geom_point(colour= 'black' )
#Revisamos este compuesto contra todos los demás del set Vassey_y
ds_my = melt(Vessel_Y, id.vars = c("V6"), variable.name = "Compuestos") #cambio de estructura para hacer el gráfico.
ggplot(ds_my, aes(V6,value)) + geom_line(aes(colour = Compuestos))
# Conectamos la info de SO3 con los datos de frecuencias, y luego separamos los sets
SO3 = Vessel_Y[,6]
dsb = data.frame(cbind(SO3,Vessel_X))
set.seed(123)
n = nrow(dsb)
n_test = 40 #aprox un 20%
n_train =  n - n_test
test_indexes = sample(n, n_test)
dsb_test = dsb[test_indexes, ]
dsb_train = dsb[-test_indexes, ]
write.table(dsb_test,
paste( 'data_test_p1.csv', sep=''),
sep=",",
row.names=F,
col.names=T)
write.table(dsb_train,
paste('data_train_p1.csv', sep=''),
sep=",",
row.names=F,
col.names=T)
dsb_data_train = read.csv(file.choose(),
sep=",",
header=T)
dsb_data_test = read.csv(file.choose(),
sep=",",
header=T)
vesselx <- Vessel_X
vessely <- Vessel_Y
#Grafique en función de la frecuencia las medias y varianzas de X, y también algunos espectros (o sea, x(i,j) en función de j para algunos i)"
#SD versus frecuencia
plot(apply(vesselx,2,sd),ty="l",ylab="SD",xlab="Frecuencia")
#Media versus frecuencia
plot(apply(vesselx,2,mean),ty="l",ylab="Media",xlab="Frecuencia") #Media versus frecuencia
#RSD versus frecuencia
plot((apply(vesselx,2,sd)/apply(vesselx,2,mean)),ty="l",ylab="RSD",xlab="Frecuencia") #RSD versus frecuencia
#Grafico algunos espectros para chusmear
plot(as.vector(t(vesselx[1,])),ty="l",col=1,ylim=c(0,7000),xlab="Frecuencia",ylab="Intensidad",lwd=1.2)
lines(as.vector(t(vesselx[10,])),ty="l",col=2,lwd=1.2)
lines(as.vector(t(vesselx[60,])),ty="l",col=3,lwd=1.2)
lines(as.vector(t(vesselx[100,])),ty="l",col=4,lwd=1.2)
lines(as.vector(t(vesselx[180,])),ty="l",col=5,lwd=1.2)
legend("topleft",legend=c(1,10,60,100,180),col=c(1,2,3,4,5),lty=1)
#Pruebo con una regresión de componentes principales sobre los datos tal cual
#Fijo la semilla y sampleo 140 para entrenar y las otras 40 para testear
set.seed(100)
sample<-sample(x=nrow(vesselx),140,replace=FALSE)
so3<-vessely[,6]
so3train<-so3[sample]
so3test<-so3[-sample]
vesselxtrain<-vesselx[sample,]
vesselxtest<-vesselx[-sample,]
#Cargo la library de PCR
library(pls)
#Hago un ajuste por PCR
ajustepcr<-pcr(so3train ~ as.matrix(vesselxtrain),scale=TRUE)
plot(ajustepcr)
#Estimo el ECM de predicción usando el grupo de testeo en función del numero de componentes principales
error<-seq(1,139)
for(i in (1:139)){
error[i] = mean( (so3test-predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=i))^2 )
}
plot(error,ty="l",xlab="Nùmero de componentes principales",ylab="Error cuadrático medio de predicción")
summary(ajustepcr)
ajustepcr$scale
ajustepcr$terms
ajustepcr$model
ajustepcr$call
ajustepcr$scale
ajustepcr$scale[1]
ajustepcr$scale
library(FactoMineR)
pred25comp = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=25)
plot(pred25comp,so3test)
plot(pred25comp,so3test,asp=1)
plot(pred25comp,so3test,asp=1, xlim=c(0,0.4), ylim = c(0,0.4))
plot(pred25comp,so3test, xlim=c(0,0.4), ylim = c(0,0.4))
pred25comp = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=25)
pred25compTrain = predict(ajustepcr,newdata=as.matrix(vesselxtrain),ncomp=25)
plot(pred25comp,so3test, xlim=c(0,0.4), ylim = c(0,0.4))
points(pred25compTrain,so3train, xlim=c(0,0.4), ylim = c(0,0.4))
plot(pred25comp,so3test, xlim=c(0,0.4), ylim = c(0,0.4))
points(pred25compTrain,so3train, col = 4)
plot(pred25comp,so3test, xlim=c(0,0.4), ylim = c(0,0.4), col = 2)
points(pred25compTrain,so3train, col = 4)
pred25comp = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=20)
pred25compTrain = predict(ajustepcr,newdata=as.matrix(vesselxtrain),ncomp=20)
plot(pred25comp,so3test, xlim=c(0,0.4), ylim = c(0,0.4), col = 2)
points(pred25compTrain,so3train, col = 4)
pred25comp = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=20)
pred25compTrain = predict(ajustepcr,newdata=as.matrix(vesselxtrain),ncomp=100)
plot(pred25comp,so3test, xlim=c(0,0.4), ylim = c(0,0.4), col = 2)
points(pred25compTrain,so3train, col = 4)
pred25comp = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=22)
pred25compTrain = predict(ajustepcr,newdata=as.matrix(vesselxtrain),ncomp=22)
plot(pred25comp,so3test, xlim=c(0,0.4), ylim = c(0,0.4), col = 2)
points(pred25compTrain,so3train, col = 4)
pred25comp = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=25)
pred25compTrain = predict(ajustepcr,newdata=as.matrix(vesselxtrain),ncomp=25)
plot(pred25comp,so3test, xlim=c(0,0.4), ylim = c(0,0.4), col = 2)
points(pred25compTrain,so3train, col = 4)
plot(pred25comp,so3test, xlim=c(0,0.4), ylim = c(0,0.4), col = 2)
points(pred25compTrain,so3train, col = 6)
plot(pred25comp,so3test, xlim=c(0,0.4), ylim = c(0,0.4), col = 2)
points(pred25compTrain,so3train, col = 4)
pred25comp = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=100)
pred25compTrain = predict(ajustepcr,newdata=as.matrix(vesselxtrain),ncomp=100)
plot(pred25comp,so3test, xlim=c(0,0.4), ylim = c(0,0.4), col = 2)
points(pred25compTrain,so3train, col = 4)
pred25comp = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=120)
pred25compTrain = predict(ajustepcr,newdata=as.matrix(vesselxtrain),ncomp=120)
plot(pred25comp,so3test, xlim=c(0,0.4), ylim = c(0,0.4), col = 2)
points(pred25compTrain,so3train, col = 4)
pred25compTest = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=120)
pred120compTest = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=120)
plot(pred25comp,so3test, xlim=c(0,0.4), ylim = c(0,0.4), col = 2)
points(pred120compTest,so3test, col = 4)
plot(pred25compTest,so3test, xlim=c(0,0.4), ylim = c(0,0.4), col = 2)
points(pred120compTest,so3test, col = 4)
plot(pred25compTest,so3test, xlim=c(0,0.4), ylim = c(0,0.4), col = 2)
points(pred120compTest,so3test, col = 4)
plot(pred25compTest,so3test, xlim=c(0,0.4), ylim = c(0,0.4), col = 2)
#points(pred120compTest,so3test, col = 4)
?points
plot(pred25compTest,so3test, xlim=c(0,0.4), ylim = c(0,0.4), col = 2)
points(pred120compTest,so3test, col = 4, type="X")
plot(pred25compTest,so3test, xlim=c(0,0.4), ylim = c(0,0.4), col = 2)
points(pred120compTest,so3test, col = 4, type="x")
plot(pred25compTest,so3test, xlim=c(0,0.4), ylim = c(0,0.4), col = 2)
points(pred120compTest,so3test, col = 4, pch="x")
plot(pred25compTest,so3test, xlim=c(0,0.4), ylim = c(0,0.4), col = 2, xlab="pred con 25 y 100 comp")
points(pred120compTest,so3test, col = 4, pch="x")
pred25compTest = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=25)
pred120compTest = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=120)
plot(pred25compTest,so3test, xlim=c(0,0.4), ylim = c(0,0.4), col = 2, xlab="pred con 25 y 100 comp")
points(pred120compTest,so3test, col = 4, pch="x")
plot(pred25compTest,so3test, xlim=c(0,0.4), ylim = c(0,0.4), col = 2, xlab="pred con 25 y 120 comp")
points(pred120compTest,so3test, col = 4, pch="x")
pred25compTest = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=10)
pred120compTest = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=120)
plot(pred25compTest,so3test, xlim=c(0,0.4), ylim = c(0,0.4), col = 2, xlab="pred con 25 y 120 comp")
points(pred120compTest,so3test, col = 4, pch="x")
pred25compTest = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=10)
pred120compTest = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=120)
plot(pred25compTest,so3test, xlim=c(0,0.4), ylim = c(0,0.4), col = 2, xlab="pred con 25 y 120 comp")
points(pred120compTest,so3test, col = 4, pch="x")
pred25compTest = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=5)
pred120compTest = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=120)
plot(pred25compTest,so3test, xlim=c(0,0.4), ylim = c(0,0.4), col = 2, xlab="pred con 25 y 120 comp")
points(pred120compTest,so3test, col = 4, pch="x")
pred25compTest = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=10)
pred120compTest = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=120)
plot(pred25compTest,so3test, xlim=c(0,0.4), ylim = c(0,0.4), col = 2, xlab="pred con 25 y 120 comp")
points(pred120compTest,so3test, col = 4, pch="x")
pred25compTest = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=10)
pred120compTest = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=130)
plot(pred25compTest,so3test, xlim=c(0,0.4), ylim = c(0,0.4), col = 2, xlab="pred con 25 y 120 comp")
points(pred120compTest,so3test, col = 4, pch="x")
pred25compTest = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=10)
pred120compTest = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=139)
plot(pred25compTest,so3test, xlim=c(0,0.4), ylim = c(0,0.4), col = 2, xlab="pred con 25 y 120 comp")
points(pred120compTest,so3test, col = 4, pch="x")
pred25compTest = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=1)
pred120compTest = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=139)
plot(pred25compTest,so3test, xlim=c(0,0.4), ylim = c(0,0.4), col = 2, xlab="pred con 25 y 120 comp")
points(pred120compTest,so3test, col = 4, pch="x")
pred25compTest = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=2)
pred120compTest = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=139)
plot(pred25compTest,so3test, xlim=c(0,0.4), ylim = c(0,0.4), col = 2, xlab="pred con 25 y 120 comp")
points(pred120compTest,so3test, col = 4, pch="x")
pred25compTest = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=20)
pred120compTest = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=139)
plot(pred25compTest,so3test, xlim=c(0,0.4), ylim = c(0,0.4), col = 2, xlab="pred con 25 y 120 comp")
points(pred120compTest,so3test, col = 4, pch="x")
pred25compTest = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=50)
pred120compTest = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=139)
plot(pred25compTest,so3test, xlim=c(0,0.4), ylim = c(0,0.4), col = 2, xlab="pred con 25 y 120 comp")
points(pred120compTest,so3test, col = 4, pch="x")
pred25compTest = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=25)
pred120compTest = predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=139)
plot(pred25compTest,so3test, xlim=c(0,0.4), ylim = c(0,0.4), col = 2, xlab="pred con 25 y 120 comp")
points(pred120compTest,so3test, col = 4, pch="x")
plot(pred25compTest,so3test, xlim=c(0,0.4), ylim = c(0,0.4), col = 2, xlab="pred con 25 y 120 comp")
points(pred120compTest,so3test, col = 4, pch="x")
lines(so3test,so3test)
plot(pred25compTest,so3test, xlim=c(0,0.4), ylim = c(0,0.4), col = 2, xlab="pred con 25 -o- y 120 comp -x- ")
points(pred120compTest,so3test, col = 4, pch="x")
lines(so3test,so3test)
?pls
jack.test(ajustepcr)
jack.test(ajustepcr, ncomp=139)
plot(
ajustepcr,
plottype = c("prediction", "validation", "coefficients", "scores", "loadings",
"biplot", "correlation")
)
plot.mvr(
ajustepcr,
plottype = c("prediction", "validation", "coefficients", "scores", "loadings",
"biplot", "correlation")
)
library(pls)
?pls
ajustepcr<-mvr(so3train ~ as.matrix(vesselxtrain),scale=TRUE)
plot(ajustepcr)
plot.mvr(ajustepcr)
ajustemvr<-mvr(so3train ~ as.matrix(vesselxtrain),scale=TRUE)
plot(
ajustemvr,
plottype = c("prediction", "validation", "coefficients", "scores", "loadings",
"biplot", "correlation")
)
predplot(
ajustemvr,
plottype = c("prediction", "validation", "coefficients", "scores", "loadings",
"biplot", "correlation")
)
predplot.mvr(
ajustemvr,
plottype = c("prediction", "validation", "coefficients", "scores", "loadings",
"biplot", "correlation")
)
#Veo el gráfico de residuos versus ajustados para CP=(100) (menor ECM)
plot(residuals(ajustepcr)[,,100]~predict(ajustepcr,newdata=as.matrix(vesselxtrain),ncomp=100),xlab="Y predicho",ylab="Residuo",ylim=c(-0.06,0.06))
abline(h=0,col="red")
#Veo el gráfico de residuos versus ajustados para CP=(100) (menor ECM)
plot(residuals(ajustepcr)[,,100]~predict(ajustepcr,newdata=as.matrix(vesselxtest),ncomp=100),xlab="Y predicho",ylab="Residuo",ylim=c(-0.06,0.06))
install.packages("fda")
library(fda)
library(fda)
install.packages("fda")
Rscript -e "install.packages('RCurl')"
install.packages("RCurl")
install.packages("MVN")
install.packages("gsl”)
install.packages("gsl")
sudo apt-get install libgsl-dev
mfeat<-cbind(fac[1:55],pix,zer,kar,mor)#cbind(fou,fac,kar,pix,zer,mor)
rm(list = ls())
graphics.off()
library(ggplot2)
library(ggpubr)
library(leaps)
library(broom)
library(RobStatTM)
library(reshape2)
library(stringr)
fou<-read.table("mfeat-fou",header=FALSE)
fac<-read.table("mfeat-fac",header=FALSE)
kar<-read.table("mfeat-kar",header=FALSE)
pix<-read.table("mfeat-pix",header=FALSE)
zer<-read.table("mfeat-zer",header=FALSE)
mor<-read.table("mfeat-mor",header=FALSE)
#mor$V1<-as.factor(mor$V1)
#mor$V2<-as.factor(mor$V2)
#mor$V3<-as.factor(mor$V3)
mfeat<-cbind(fou,fac,kar,pix,zer,mor)
colnames(mfeat)<-as.vector(seq(1,649,1))#as.vector(seq(1,649,1))
class<-rep(0,2000)
class[(1:200)]<-0
class[(201:400)]<-1
class[(401:600)]<-2
class[(601:800)]<-3
class[(801:1000)]<-4
class[(1001:1200)]<-5
class[(1201:1400)]<-6
class[(1401:1600)]<-7
class[(1601:1800)]<-8
class[(1801:2000)]<-9
class<-as.factor(class)
datos<-cbind(mfeat,class)
mfeat<-cbind(fac[1:55],pix,zer,kar,mor)#cbind(fou,fac,kar,pix,zer,mor)
colnames(mfeat)<-as.vector(seq(1,length(mfeat),1))
modelo_lda <- lda(formula = datos$class ~ .,data = mfeat)
library(MASS)
mfeat<-cbind(fac[1:55],pix,zer,kar,mor)#cbind(fou,fac,kar,pix,zer,mor)
colnames(mfeat)<-as.vector(seq(1,length(mfeat),1))
modelo_lda <- lda(formula = datos$class ~ .,data = mfeat)
predicciones <- predict(object = modelo_lda, newdata = mfeat)
table(datos$class, predicciones$class, dnn = c("Clase real", "Clase predicha"))
trainig_error <- mean(datos$class != predicciones$class) * 100
paste("trainig_error =", trainig_error, "%")
fou<-read.table("mfeat-fou",header=FALSE)
fac<-read.table("mfeat-fac",header=FALSE)
kar<-read.table("mfeat-kar",header=FALSE)
pix<-read.table("mfeat-pix",header=FALSE)
zer<-read.table("mfeat-zer",header=FALSE)
mor<-read.table("mfeat-mor",header=FALSE)
mor$V1<-as.factor(mor$V1)
mor$V2<-as.factor(mor$V2)
mor$V3<-as.factor(mor$V3)
mfeat<-cbind(fou,kar,pix,zer,mor,fac)
colnames(mfeat)<-as.vector(seq(1,649,1))#as.vector(seq(1,649,1))
class<-rep(0,2000)
class[(1:200)]<-0
class[(201:400)]<-1
class[(401:600)]<-2
class[(601:800)]<-3
class[(801:1000)]<-4
class[(1001:1200)]<-5
class[(1201:1400)]<-6
class[(1401:1600)]<-7
class[(1601:1800)]<-8
class[(1801:2000)]<-9
class<-as.factor(class)
datos<-cbind(mfeat,class)
set.seed(100)
n = nrow(datos)
trainIndex = sample(1:n, size = round(0.7*n), replace=FALSE)
ds.train = datos[trainIndex ,]
ds.test = datos[-trainIndex ,]
table(ds.train$class)
table(ds.test$class)
```
table(ds.train$class)
table(ds.test$class)
```
table(ds.train$class)
table(ds.test$class)
```
table(ds.train$class)
table(ds.test$class)
library(MVN)
set.seed(100)
n = nrow(datos)
trainIndex = sample(1:n, size = round(0.7*n), replace=FALSE)
ds.train = datos[trainIndex ,]
ds.test = datos[-trainIndex ,]
ds.train.x = subset(ds.train, select=c(-class))
ds.test.x = subset(ds.test, select=c(-class))
table(ds.train$class)
table(ds.test$class)
649-216
library(MASS)
mfeat<-cbind(fac[1:55],fou,pix,zer,kar,mor)#cbind(fou,fac,kar,pix,zer,mor)
colnames(mfeat)<-as.vector(seq(1,length(mfeat),1))
modelo_lda <- lda(formula = datos$class ~ .,data = mfeat)
predicciones <- predict(object = modelo_lda, newdata = mfeat)
table(datos$class, predicciones$class, dnn = c("Clase real", "Clase predicha"))
trainig_error <- mean(datos$class != predicciones$class) * 100
paste("trainig_error =", trainig_error, "%")
mfeat<-cbind(fou,pix,zer,kar,mor)#cbind(fou,fac,kar,pix,zer,mor)
colnames(mfeat)<-as.vector(seq(1,length(mfeat),1))
modelo_lda <- lda(formula = datos$class ~ .,data = mfeat)
predicciones <- predict(object = modelo_lda, newdata = mfeat)
table(datos$class, predicciones$class, dnn = c("Clase real", "Clase predicha"))
trainig_error <- mean(datos$class != predicciones$class) * 100
paste("trainig_error =", trainig_error, "%")
mfeat<-cbind(fac[1:55],fou,pix,zer,kar,mor)#cbind(fou,fac,kar,pix,zer,mor)
colnames(mfeat)<-as.vector(seq(1,length(mfeat),1))
modelo_lda <- lda(formula = datos$class ~ .,data = mfeat)
predicciones <- predict(object = modelo_lda, newdata = mfeat)
table(datos$class, predicciones$class, dnn = c("Clase real", "Clase predicha"))
trainig_error <- mean(datos$class != predicciones$class) * 100
paste("trainig_error =", trainig_error, "%")
mfeat<-cbind(fou,pix,zer,kar,mor,fac[1:55])#cbind(fou,fac,kar,pix,zer,mor)
colnames(mfeat)<-as.vector(seq(1,length(mfeat),1))
modelo_lda <- lda(formula = datos$class ~ .,data = mfeat)
unlink('Documents/MEL/MAESTRIA/TP_Especializacion/TP_ESP/tp_esp_LDA_QDA_cache', recursive = TRUE)
setwd("~/Documents/MEL/MAESTRIA/TP_Especializacion/TP_ESP")
rm(list = ls())
graphics.off()
library(ggplot2)
library(ggpubr)
library(leaps)
library(broom)
library(RobStatTM)
library(reshape2)
library(stringr)
fou<-read.table("mfeat-fou",header=FALSE)
fac<-read.table("mfeat-fac",header=FALSE)
kar<-read.table("mfeat-kar",header=FALSE)
pix<-read.table("mfeat-pix",header=FALSE)
zer<-read.table("mfeat-zer",header=FALSE)
mor<-read.table("mfeat-mor",header=FALSE)
#mor$V1<-as.factor(mor$V1)
#mor$V2<-as.factor(mor$V2)
#mor$V3<-as.factor(mor$V3)
mfeat<-cbind(fou,kar,pix,zer,mor,fac)
colnames(mfeat)<-as.vector(seq(1,649,1))#as.vector(seq(1,649,1))
class<-rep(0,2000)
class[(1:200)]<-0
class[(201:400)]<-1
class[(401:600)]<-2
class[(601:800)]<-3
class[(801:1000)]<-4
class[(1001:1200)]<-5
class[(1201:1400)]<-6
class[(1401:1600)]<-7
class[(1601:1800)]<-8
class[(1801:2000)]<-9
class<-as.factor(class)
datos<-cbind(mfeat,class)
set.seed(100)
n = nrow(datos)
trainIndex = sample(1:n, size = round(0.7*n), replace=FALSE)
ds.train = datos[trainIndex ,]
ds.test = datos[-trainIndex ,]
ds.train.x = subset(ds.train, select=c(-class))
ds.test.x = subset(ds.test, select=c(-class))
library(MVN)
ds.train.x =  subset(ds.train, select=c(-class))
datos_tidy <- melt( subset(ds.train, select=c(-399,-416,-469,-477,-492,-484,-491,-502,-506,-521,-522,-585,-586,-507,-508) ), value.name = "valor")
kable(datos_tidy %>% group_by(class, variable) %>% summarise(p_value_Shapiro.test = shapiro.test(valor)$p.value))
# Contraste de normalidad Shapiro-Wilk para cada variable en cada especie
library(reshape2)
library(knitr)
library(dplyr)
ds.train.x =  subset(ds.train, select=c(-class))
datos_tidy <- melt( subset(ds.train, select=c(-399,-416,-469,-477,-492,-484,-491,-502,-506,-521,-522,-585,-586,-507,-508) ), value.name = "valor")
kable(datos_tidy %>% group_by(class, variable) %>% summarise(p_value_Shapiro.test = shapiro.test(valor)$p.value))
ds.train.x =  subset(ds.train, select=c(-class))
datos_tidy <- melt( subset(ds.train, select=c(-253,-399,-416,-469,-477,-492,-484,-491,-502,-506,-521,-522,-585,-586,-507,-508) ), value.name = "valor")
kable(datos_tidy %>% group_by(class, variable) %>% summarise(p_value_Shapiro.test = shapiro.test(valor)$p.value))
ds.train.x =  subset(ds.train, select=c(-class))
datos_tidy <- melt( subset(ds.train, select=c(-268,-253,-399,-416,-469,-477,-492,-484,-491,-502,-506,-521,-522,-585,-586,-507,-508) ), value.name = "valor")
kable(datos_tidy %>% group_by(class, variable) %>% summarise(p_value_Shapiro.test = shapiro.test(valor)$p.value))
ds.train.x =  subset(ds.train, select=c(-class))
datos_tidy <- melt( subset(ds.train, select=c(-268,-430,-253,-399,-416,-469,-477,-492,-484,-491,-502,-506,-521,-522,-585,-586,-507,-508) ), value.name = "valor")
kable(datos_tidy %>% group_by(class, variable) %>% summarise(p_value_Shapiro.test = shapiro.test(valor)$p.value))
ds.train.x =  subset(ds.train, select=c(-class))
datos_tidy <- melt( subset(ds.train, select=c(-268,-430,-428,-253,-399,-416,-469,-477,-492,-484,-491,-502,-506,-521,-522,-585,-586,-507,-508) ), value.name = "valor")
kable(datos_tidy %>% group_by(class, variable) %>% summarise(p_value_Shapiro.test = shapiro.test(valor)$p.value))
set.seed(100)
n = nrow(datos)
trainIndex = sample(1:n, size = round(0.7*n), replace=FALSE)
ds.train = datos[trainIndex ,]
ds.test = datos[-trainIndex ,]
ds.train.x = subset(ds.train, select=c(-class))
ds.test.x = subset(ds.test, select=c(-class))
ds.shapiro = datos_tidy %>% group_by(class, variable) %>% summarise(p_value_Shapiro.test = shapiro.test(valor)$p.value)
datos_tidy <- melt( subset(ds.train, select=c(-275,-268,-430,-428,-253,-399,-416,-469,-477,-492,-484,-491,-502,-506,-521,-522,-585,-586,-507,-508) ), value.name = "valor")
datos_tidy <- melt( subset(ds.train, select=c(-275,-268,-430,-428,-253,-399,-416,-469,-477,-492,-484,-491,-502,-506,-521,-522,-585,-586,-507,-508) ), value.name = "valor")
kable(datos_tidy %>% group_by(class, variable) %>% summarise(p_value_Shapiro.test = shapiro.test(valor)$p.value))
datos_tidy <- melt( subset(ds.train, select=c(-290,-275,-268,-430,-428,-253,-399,-416,-469,-477,-492,-484,-491,-502,-506,-521,-522,-585,-586,-507,-508) ), value.name = "valor")
kable(datos_tidy %>% group_by(class, variable) %>% summarise(p_value_Shapiro.test = shapiro.test(valor)$p.value))
datos_tidy <- melt( subset(ds.train, select=c(-305,-290,-275,-268,-430,-428,-253,-399,-416,-469,-477,-492,-484,-491,-502,-506,-521,-522,-585,-586,-507,-508) ), value.name = "valor")
kable(datos_tidy %>% group_by(class, variable) %>% summarise(p_value_Shapiro.test = shapiro.test(valor)$p.value))
datos_tidy <- melt( subset(ds.train, select=c(-369,-305,-290,-275,-268,-430,-428,-253,-399,-416,-469,-477,-492,-484,-491,-502,-506,-521,-522,-585,-586,-507,-508) ), value.name = "valor")
kable(datos_tidy %>% group_by(class, variable) %>% summarise(p_value_Shapiro.test = shapiro.test(valor)$p.value))
datos_tidy <- melt( subset(ds.train, select=c(-369,-370,-305,-290,-275,-268,-430,-428,-253,-399,-416,-469,-477,-492,-484,-491,-502,-506,-521,-522,-585,-586,-507,-508) ), value.name = "valor")
kable(datos_tidy %>% group_by(class, variable) %>% summarise(p_value_Shapiro.test = shapiro.test(valor)$p.value))
datos_tidy <- melt( subset(ds.train, select=c(-369,-370,-200,-305,-290,-275,-268,-430,-428,-253,-399,-416,-469,-477,-492,-484,-491,-502,-506,-521,-522,-585,-586,-507,-508) ), value.name = "valor")
kable(datos_tidy %>% group_by(class, variable) %>% summarise(p_value_Shapiro.test = shapiro.test(valor)$p.value))
datos_tidy <- melt( subset(ds.train, select=c(-369,-370,-200,-183,-305,-290,-275,-268,-430,-428,-253,-399,-416,-469,-477,-492,-484,-491,-502,-506,-521,-522,-585,-586,-507,-508) ), value.name = "valor")
kable(datos_tidy %>% group_by(class, variable) %>% summarise(p_value_Shapiro.test = shapiro.test(valor)$p.value))
datos_tidy <- melt( subset(ds.train, select=c(-369,-370,-200,-183,-261,-305,-290,-275,-268,-430,-428,-253,-399,-416,-469,-477,-492,-484,-491,-502,-506,-521,-522,-585,-586,-507,-508) ), value.name = "valor")
kable(datos_tidy %>% group_by(class, variable) %>% summarise(p_value_Shapiro.test = shapiro.test(valor)$p.value))
datos_tidy <- melt( subset(ds.train, select=c(-369,-370,-200,-183,-261,-276,-305,-290,-275,-268,-430,-428,-253,-399,-416,-469,-477,-492,-484,-491,-502,-506,-521,-522,-585,-586,-507,-508) ), value.name = "valor")
kable(datos_tidy %>% group_by(class, variable) %>% summarise(p_value_Shapiro.test = shapiro.test(valor)$p.value))
datos_tidy <- melt( subset(ds.train, select=c(-369,-370,-200,-183,-261,-276,-306,-305,-290,-275,-268,-430,-428,-253,-399,-416,-469,-477,-492,-484,-491,-502,-506,-521,-522,-585,-586,-507,-508) ), value.name = "valor")
kable(datos_tidy %>% group_by(class, variable) %>% summarise(p_value_Shapiro.test = shapiro.test(valor)$p.value))
datos_tidy <- melt( subset(ds.train, select=c(-369,-370,-200,-183,-261,-276,-306,-291,-305,-290,-275,-268,-430,-428,-253,-399,-416,-469,-477,-492,-484,-491,-502,-506,-521,-522,-585,-586,-507,-508) ), value.name = "valor")
kable(datos_tidy %>% group_by(class, variable) %>% summarise(p_value_Shapiro.test = shapiro.test(valor)$p.value))
datos_tidy <- melt( subset(ds.train, select=c(1:485,495:590,591:599,605:615,630:649)), value.name = "valor")
#select=c(-369,-370,-200,-183,-261,-276,-306,-291,-305,-290,-275,-268,-430,-428,-253,-399,-416,-469,-477,-492,-484,-491,-502,-506,-521,-522,-585,-586,-507,-508) ), value.name = "valor")
kable(datos_tidy %>% group_by(class, variable) %>% summarise(p_value_Shapiro.test = shapiro.test(valor)$p.value))
datos_tidy <- melt( subset(ds.train, select=c(1:485,495:590,591:599,605:615,630:650)), value.name = "valor")
#select=c(-369,-370,-200,-183,-261,-276,-306,-291,-305,-290,-275,-268,-430,-428,-253,-399,-416,-469,-477,-492,-484,-491,-502,-506,-521,-522,-585,-586,-507,-508) ), value.name = "valor")
kable(datos_tidy %>% group_by(class, variable) %>% summarise(p_value_Shapiro.test = shapiro.test(valor)$p.value))
datos_tidy <- melt( subset(ds.train, select=c(1:485,495:590,591:599,605:615,630:650,-253)), value.name = "valor")
datos_tidy <- melt( subset(ds.train,select=c(-369,-370,-200,-183,-261,-276,-306,-291,-305,-290,-275,-268,-430,-428,-253,-399,-416,-469,-477,-492,-484,-491,-502,-506,-521,-522,-585,-586,-507,-508) ), value.name = "valor")
#select=c(-369,-370,-200,-183,-261,-276,-306,-291,-305,-290,-275,-268,-430,-428,-253,-399,-416,-469,-477,-492,-484,-491,-502,-506,-521,-522,-585,-586,-507,-508) ), value.name = "valor")
kable(datos_tidy %>% group_by(class, variable) %>% summarise(p_value_Shapiro.test = shapiro.test(valor)$p.value))
datos_tidy <- melt( subset(ds.train,select=c(-292,-369,-370,-200,-183,-261,-276,-306,-291,-305,-290,-275,-268,-430,-428,-253,-399,-416,-469,-477,-492,-484,-491,-502,-506,-521,-522,-585,-586,-507,-508) ), value.name = "valor")
#select=c(-369,-370,-200,-183,-261,-276,-306,-291,-305,-290,-275,-268,-430,-428,-253,-399,-416,-469,-477,-492,-484,-491,-502,-506,-521,-522,-585,-586,-507,-508) ), value.name = "valor")
kable(datos_tidy %>% group_by(class, variable) %>% summarise(p_value_Shapiro.test = shapiro.test(valor)$p.value))
ds.shapiro = datos_tidy %>% group_by(class, variable) %>% summarise(p_value_Shapiro.test = shapiro.test(valor)$p.value)
ds.shapiro
p1 <- ggplot(data = ds.shapiro, aes(x = p_value_Shapiro.test , fill = class)) +
geom_histogram(position = "identity", alpha = 0.5, bins = 100)
ggarrange(p1, nrow = 1, common.legend = TRUE)
p1 <- ggplot(data = ds.shapiro, aes(x = p_value_Shapiro.test , fill = class)) +
geom_histogram(position = "identity", alpha = 0.5, bins = 50)
ggarrange(p1, nrow = 1, common.legend = TRUE)
p1 <- ggplot(data = ds.shapiro, aes(x = p_value_Shapiro.test , fill = class)) +
geom_histogram(position = "identity", alpha = 0.5, bins = 50)+
geom_vline(x=0.05)
p1 <- ggplot(data = ds.shapiro, aes(x = p_value_Shapiro.test , fill = class)) +
geom_histogram(position = "identity", alpha = 0.5, bins = 50)+
geom_vline(xintercepción=0.05)
p1 <- ggplot(data = ds.shapiro, aes(x = p_value_Shapiro.test , fill = class)) +
geom_histogram(position = "identity", alpha = 0.5, bins = 50)+
geom_vline(xintercept = 0.05)
ggarrange(p1, nrow = 1, common.legend = TRUE)
p1 <- ggplot(data = ds.shapiro, aes(x = p_value_Shapiro.test , fill = class)) +
geom_histogram(position = "identity", alpha = 0.5, bins = 50)+
geom_vline(xintercept = 0.05,linetype = ' dashed ', color = ' blue ', size = 2 )
ggarrange(p1, nrow = 1, common.legend = TRUE)
p1 <- ggplot(data = ds.shapiro, aes(x = p_value_Shapiro.test , fill = class)) +
geom_histogram(position = "identity", alpha = 0.5, bins = 50)+
geom_vline(xintercept = 0.05, aes(linetype = ' dashed ', color = ' blue ', size = 2) )
p1 <- ggplot(data = ds.shapiro, aes(x = p_value_Shapiro.test , fill = class)) +
geom_histogram(position = "identity", alpha = 0.5, bins = 50)+
geom_vline(xintercept = 0.05, linetype ='dashed', color = ' blue ', size = 2)
ggarrange(p1, nrow = 1, common.legend = TRUE)
